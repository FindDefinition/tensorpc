syntax = "proto3";

package distflow.protos;
import "arraybuf.proto";

service RemoteObject {
  rpc RemoteCall (RemoteCallRequest) returns (RemoteCallReply) {}
  rpc RemoteGenerator (RemoteCallRequest) returns (stream RemoteCallReply) {}
  rpc RemoteJsonCall (RemoteJsonCallRequest) returns (RemoteJsonCallReply) {}
  rpc RemoteJsonGenerator (RemoteJsonCallRequest) returns (stream RemoteJsonCallReply) {}
  rpc RemoteStreamCall (stream RemoteCallRequest) returns (stream RemoteCallReply) {}
  rpc Shutdown (HealthCheckRequest) returns (HealthCheckReply) {}
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckReply) {}
  rpc QueryServerMeta(RemoteCallRequest) returns (SimpleReply) {}
  rpc QueryServiceMeta(RemoteCallRequest) returns (SimpleReply) {}
  rpc ChunkedRemoteCall (stream RemoteCallStream) returns (stream RemoteCallStream) {}
  // first RemoteCallRequest will save paramsters of generator call, following are generator data.
  rpc ClientStreamRemoteCall (stream RemoteCallRequest) returns (RemoteCallReply) {}
  rpc BiStreamRemoteCall (stream RemoteCallRequest) returns (stream RemoteCallReply) {}
  rpc SayHello(HelloRequest) returns (HelloReply) {}
}

enum EncodeMethod {
  Unknown = 0;
  Json = 0x01;
  Pickle = 0x02;
  MessagePack = 0x03;

  JsonArray = 0x10;
  PickleArray = 0x20; // default
  MessagePackArray = 0x30;

  NoArrayMask = 0x0000000f;
  ArrayMask = 0x000000f0;
  Mask = 0x000000ff;
}

message SimpleReply {
  string data = 1;
  string exception = 2;
}

message RemoteCallRequest {
  repeated ndarray arrays = 1;
  int64 block_id = 2;
  int64 flags = 3;
  string callback = 4;
  string service_key = 5;
}

message RemoteJsonCallRequest {
  repeated ndarray arrays = 1;
  int64 flags = 2;
  string data = 3;
  string service_key = 4;
  string callback = 5;
}

enum WebSocketType {
  PeerRequest = 0;
  Peer = 1;
  PeerExit = 2;
  RPCRequest = 3;
  RPCReply = 4;
  Chunk = 5; // chunk header, data save size/index/total
}

message WebSocketStream {
  WebSocketType type = 1;
  repeated ndarray arrays = 2;
  string data = 3;
  string service_key = 4;
  string exception = 5;
  // provide this in rpc request, server will add this id in rpc reply.
  int64 id = 6; 
}

message RemoteCallReply {
  repeated ndarray arrays = 1;
  int64 block_id = 2;
  int64 flags = 3;
  string exception = 4;
}

message RemoteJsonCallReply {
  repeated ndarray arrays = 1;
  string data = 2;
  int64 flags = 3;
  string exception = 4;
}


message RemoteCallStream {
  int32 num_chunk = 1;
  int32 chunk_id = 2;
  int32 num_args = 3;
  int32 arg_id = 4;
  int64 flags = 5;
  dtype dtype = 6;
  bytes chunked_data = 7;
  string func_key = 8;
  repeated int64 shape = 9;
  string exception = 10;
}

message HealthCheckRequest {
  string service = 1;
}

message HealthCheckReply {
  string data = 1;
}

message HelloRequest {
  string data = 1;
}

message HelloReply {
  string data = 1;
}
